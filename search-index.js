var searchIndex={};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator useful for sets of…","i":[[14,"bitflags","bitflags","The macro used to generate the flag structure.",null,null]],"p":[]};
searchIndex["getopts"] = {"doc":"Simple getopt alternative.","i":[[3,"Options","getopts","A description of the options that a program can handle.",null,null],[3,"Matches","","The result of checking command line arguments. Contains a…",null,null],[12,"free","","Free string fragments",0,null],[4,"ParsingStyle","","What parsing style to use when parsing arguments.",null,null],[13,"FloatingFrees","","Flags and \"free\" arguments can be freely inter-mixed.",1,null],[13,"StopAtFirstFree","","As soon as a \"free\" argument (i.e. non-flag) is…",1,null],[4,"HasArg","","Describes whether an option has an argument.",null,null],[13,"Yes","","The option requires an argument.",2,null],[13,"No","","The option takes no argument.",2,null],[13,"Maybe","","The option argument is optional.",2,null],[4,"Occur","","Describes how often an option may occur.",null,null],[13,"Req","","The option occurs once.",3,null],[13,"Optional","","The option occurs at most once.",3,null],[13,"Multi","","The option occurs zero or more times.",3,null],[4,"Fail","","The type returned when the command line does not conform…",null,null],[13,"ArgumentMissing","","The option requires an argument but none was passed.",4,null],[13,"UnrecognizedOption","","The passed option is not declared among the possible…",4,null],[13,"OptionMissing","","A required option is not present.",4,null],[13,"OptionDuplicated","","A single occurrence option is being used multiple times.",4,null],[13,"UnexpectedArgument","","There's an argument being passed to a non-argument option.",4,null],[6,"Result","","The result of parsing a command line with a set of options.",null,null],[11,"new","","Create a blank set of options.",5,[[],["options",3]]],[11,"parsing_style","","Set the parsing style.",5,[[["parsingstyle",4]],["options",3]]],[11,"long_only","","Set or clear \"long options only\" mode.",5,[[],["options",3]]],[11,"opt","","Create a generic option group, stating all parameters…",5,[[["occur",4],["hasarg",4]],["options",3]]],[11,"optflag","","Create a long option that is optional and does not take an…",5,[[],["options",3]]],[11,"optflagmulti","","Create a long option that can occur more than once and…",5,[[],["options",3]]],[11,"optflagopt","","Create a long option that is optional and takes an…",5,[[],["options",3]]],[11,"optmulti","","Create a long option that is optional, takes an argument,…",5,[[],["options",3]]],[11,"optopt","","Create a long option that is optional and takes an argument.",5,[[],["options",3]]],[11,"reqopt","","Create a long option that is required and takes an argument.",5,[[],["options",3]]],[11,"parse","","Parse command line arguments according to the provided…",5,[[["intoiterator",8]],["result",6]]],[11,"short_usage","","Derive a short one-line usage summary from a set of long…",5,[[],["string",3]]],[11,"usage","","Derive a formatted message from a set of options.",5,[[],["string",3]]],[11,"usage_with_format","","Derive a custom formatted message from a set of options.…",5,[[["fnmut",8]],["string",3]]],[11,"opt_defined","","Returns true if an option was defined",0,[[]]],[11,"opt_present","","Returns true if an option was matched.",0,[[]]],[11,"opt_count","","Returns the number of times an option was matched.",0,[[]]],[11,"opt_positions","","Returns a vector of all the positions in which an option…",0,[[],["vec",3]]],[11,"opts_present","","Returns true if any of several options were matched.",0,[[]]],[11,"opts_str","","Returns the string argument supplied to one of several…",0,[[],[["option",4],["string",3]]]],[11,"opt_strs","","Returns a vector of the arguments provided to all matches…",0,[[],[["string",3],["vec",3]]]],[11,"opt_strs_pos","","Returns a vector of the arguments provided to all matches…",0,[[],["vec",3]]],[11,"opt_str","","Returns the string argument supplied to a matching option…",0,[[],[["option",4],["string",3]]]],[11,"opt_default","","Returns the matching string, a default, or `None`.",0,[[],[["option",4],["string",3]]]],[11,"opt_get","","Returns some matching value or `None`.",0,[[],[["option",4],["result",4]]]],[11,"opt_get_default","","Returns a matching value or default.",0,[[],["result",4]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"clone","","",1,[[],["parsingstyle",4]]],[11,"clone","","",2,[[],["hasarg",4]]],[11,"clone","","",3,[[],["occur",4]]],[11,"clone","","",0,[[],["matches",3]]],[11,"clone","","",4,[[],["fail",4]]],[11,"default","","",5,[[]]],[11,"eq","","",1,[[["parsingstyle",4]]]],[11,"eq","","",2,[[["hasarg",4]]]],[11,"eq","","",3,[[["occur",4]]]],[11,"eq","","",0,[[["matches",3]]]],[11,"ne","","",0,[[["matches",3]]]],[11,"eq","","",4,[[["fail",4]]]],[11,"ne","","",4,[[["fail",4]]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"description","","",4,[[]]]],"p":[[3,"Matches"],[4,"ParsingStyle"],[4,"HasArg"],[4,"Occur"],[4,"Fail"],[3,"Options"]]};
searchIndex["markedit"] = {"doc":"An ergonomic library for manipulating markdown documents.","i":[[3,"And","markedit","A [`Matcher`] which only returns `true` when both inner…",null,null],[3,"FallingEdge","","A [`Matcher`] which will detect the falling edge of another.",null,null],[3,"Heading","","Matches the items inside a heading tag, including the…",null,null],[3,"OneShot","","A [`Matcher`] which will only ever return `true` once.",null,null],[3,"StartOfNextLine","","A [`Matcher`] which will match the start of the next…",null,null],[3,"Always","","A [`Matcher`] which matches everything.",null,null],[3,"Ref","","A glorified `&mut Matcher`.",null,null],[3,"Rewritten","","A stream of [`Event`]s that have been modified by a…",null,null],[3,"Writer","","The output buffer given to [`Rewriter::rewrite_event()`].",null,null],[5,"match_indices","","Get an iterator over the indices of matching events.",null,[[]]],[5,"between","","Gets all [`Event`]s between (inclusive) two matchers.",null,[[],["option",4]]],[5,"exact_text","","Match an [`Event::Text`] event with this exact text.",null,[[["asref",8]]]],[5,"text_containing","","Match an [`Event::Text`] event which contains the provided…",null,[[["asref",8]]]],[5,"text","","Match a [`Event::Text`] node using an arbitrary predicate.",null,[[]]],[5,"link_with_url_containing","","Matches the start of a link who's URL contains a certain…",null,[[["asref",8]]]],[5,"rewrite","","The whole point.",null,[[]]],[5,"insert_markdown_before","","Inserts some markdown text before whatever is matched by…",null,[[]]],[5,"insert_before","","Splice some events into the resulting event stream before…",null,[[["vec",3],["event",4]]]],[5,"change_text","","A [`Rewriter`] which lets you update a [`Event::Text`]…",null,[[]]],[5,"parse","","A convenience function for parsing some text into…",null,[[]]],[11,"new","","Create a new [`And`] matcher.",0,[[]]],[11,"new","","Create a new [`FallingEdge`] matcher.",1,[[]]],[11,"any_level","","Matches any heading.",2,[[]]],[11,"with_level","","Matches only headings with the desired level.",2,[[]]],[11,"new","","Create a [`OneShot`] matcher.",3,[[]]],[11,"new","","Create a new [`StartOfNextLine`] matcher.",4,[[]]],[11,"new","","Create a new [`Rewritten`] iterator.",5,[[]]],[11,"push","","Queue an [`Event`] to be emitted.",6,[[["event",4]]]],[8,"Matcher","","A predicate which can be fed a stream of [`Event`]s and…",null,null],[10,"matches_event","","Evaluate this predicate against an event from an [`Event`]…",7,[[["event",4]]]],[11,"first_match","","Find the index of the first [`Event`] which is matched by…",7,[[],["option",4]]],[11,"is_in","","Checks whether this [`Matcher`] would match anything in a…",7,[[]]],[11,"then_start_of_next_line","","Returns a [`Matcher`] which will wait until `self`…",7,[[],["startofnextline",3]]],[11,"fuse","","Wraps `self` in a [`Matcher`] which will only ever return…",7,[[],["oneshot",3]]],[11,"falling_edge","","Get a [`Matcher`] which returns `true` when `self` goes…",7,[[],["fallingedge",3]]],[11,"and","","Get a [`Matcher`] which matches when `self` and `other`…",7,[[],["and",3]]],[11,"by_ref","","Borrows the [`Matcher`] , rather than consuming it.",7,[[],["ref",3]]],[8,"Rewriter","","Something which can rewrite events.",null,null],[10,"rewrite_event","","Process a single [`Event`].",8,[[["writer",3],["event",4]]]],[11,"rewrite","","Use this [`Rewriter`] to rewrite a stream of [`Event`]s.",8,[[],["rewritten",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"into_iter","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"matches_event","","",0,[[["event",4]]]],[11,"matches_event","","",1,[[["event",4]]]],[11,"matches_event","","",2,[[["event",4]]]],[11,"matches_event","","",3,[[["event",4]]]],[11,"matches_event","","",4,[[["event",4]]]],[11,"matches_event","","",9,[[["event",4]]]],[11,"matches_event","","",10,[[["event",4]]]],[11,"extend","","",6,[[["intoiterator",8]]]],[11,"next","","",5,[[],["option",4]]],[11,"clone","","",0,[[],["and",3]]],[11,"clone","","",1,[[],["fallingedge",3]]],[11,"clone","","",2,[[],["heading",3]]],[11,"clone","","",3,[[],["oneshot",3]]],[11,"clone","","",4,[[],["startofnextline",3]]],[11,"clone","","",9,[[],["always",3]]],[11,"default","","",9,[[],["always",3]]],[11,"eq","","",0,[[["and",3]]]],[11,"ne","","",0,[[["and",3]]]],[11,"eq","","",1,[[["fallingedge",3]]]],[11,"ne","","",1,[[["fallingedge",3]]]],[11,"eq","","",2,[[["heading",3]]]],[11,"ne","","",2,[[["heading",3]]]],[11,"eq","","",3,[[["oneshot",3]]]],[11,"ne","","",3,[[["oneshot",3]]]],[11,"eq","","",4,[[["startofnextline",3]]]],[11,"ne","","",4,[[["startofnextline",3]]]],[11,"eq","","",9,[[["always",3]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"hash","","",9,[[]]],[11,"first_match","","Find the index of the first [`Event`] which is matched by…",7,[[],["option",4]]],[11,"is_in","","Checks whether this [`Matcher`] would match anything in a…",7,[[]]],[11,"then_start_of_next_line","","Returns a [`Matcher`] which will wait until `self`…",7,[[],["startofnextline",3]]],[11,"fuse","","Wraps `self` in a [`Matcher`] which will only ever return…",7,[[],["oneshot",3]]],[11,"falling_edge","","Get a [`Matcher`] which returns `true` when `self` goes…",7,[[],["fallingedge",3]]],[11,"and","","Get a [`Matcher`] which matches when `self` and `other`…",7,[[],["and",3]]],[11,"by_ref","","Borrows the [`Matcher`] , rather than consuming it.",7,[[],["ref",3]]],[11,"rewrite","","Use this [`Rewriter`] to rewrite a stream of [`Event`]s.",8,[[],["rewritten",3]]]],"p":[[3,"And"],[3,"FallingEdge"],[3,"Heading"],[3,"OneShot"],[3,"StartOfNextLine"],[3,"Rewritten"],[3,"Writer"],[8,"Matcher"],[8,"Rewriter"],[3,"Always"],[3,"Ref"]]};
searchIndex["memchr"] = {"doc":"The `memchr` crate provides heavily optimized routines for…","i":[[3,"Memchr","memchr","An iterator for `memchr`.",null,null],[3,"Memchr2","","An iterator for `memchr2`.",null,null],[3,"Memchr3","","An iterator for `memchr3`.",null,null],[5,"memchr_iter","","An iterator over all occurrences of the needle in a…",null,[[],["memchr",3]]],[5,"memchr2_iter","","An iterator over all occurrences of the needles in a…",null,[[],["memchr2",3]]],[5,"memchr3_iter","","An iterator over all occurrences of the needles in a…",null,[[],["memchr3",3]]],[5,"memrchr_iter","","An iterator over all occurrences of the needle in a…",null,[[],[["rev",3],["memchr",3]]]],[5,"memrchr2_iter","","An iterator over all occurrences of the needles in a…",null,[[],[["memchr2",3],["rev",3]]]],[5,"memrchr3_iter","","An iterator over all occurrences of the needles in a…",null,[[],[["memchr3",3],["rev",3]]]],[5,"memchr","","Search for the first occurrence of a byte in a slice.",null,[[],["option",4]]],[5,"memchr2","","Like `memchr`, but searches for either of two bytes…",null,[[],["option",4]]],[5,"memchr3","","Like `memchr`, but searches for any of three bytes instead…",null,[[],["option",4]]],[5,"memrchr","","Search for the last occurrence of a byte in a slice.",null,[[],["option",4]]],[5,"memrchr2","","Like `memrchr`, but searches for either of two bytes…",null,[[],["option",4]]],[5,"memrchr3","","Like `memrchr`, but searches for any of three bytes…",null,[[],["option",4]]],[11,"new","","Creates a new iterator that yields all positions of needle…",0,[[],["memchr",3]]],[11,"new","","Creates a new iterator that yields all positions of needle…",1,[[],["memchr2",3]]],[11,"new","","Create a new `Memchr3` that's initialized to zero with a…",2,[[],["memchr3",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"into_iter","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"into_iter","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"into_iter","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"next_back","","",0,[[],["option",4]]],[11,"next_back","","",1,[[],["option",4]]],[11,"next_back","","",2,[[],["option",4]]],[11,"next","","",0,[[],["option",4]]],[11,"size_hint","","",0,[[]]],[11,"next","","",1,[[],["option",4]]],[11,"size_hint","","",1,[[]]],[11,"next","","",2,[[],["option",4]]],[11,"size_hint","","",2,[[]]]],"p":[[3,"Memchr"],[3,"Memchr2"],[3,"Memchr3"]]};
searchIndex["pulldown_cmark"] = {"doc":"Pull parser for CommonMark. This crate provides a Parser…","i":[[3,"OffsetIter","pulldown_cmark","Markdown event and source range iterator.",null,null],[3,"Options","","Option struct containing flags for enabling extra features…",null,null],[3,"Parser","","Markdown event iterator.",null,null],[3,"InlineStr","","An inline string that can contain almost three words of…",null,null],[4,"Alignment","","Table column text alignment.",null,null],[13,"None","","Default text alignment.",0,null],[13,"Left","","",0,null],[13,"Center","","",0,null],[13,"Right","","",0,null],[4,"CodeBlockKind","","Codeblock kind.",null,null],[13,"Indented","","",1,null],[13,"Fenced","","The value contained in the tag describes the language of…",1,null],[4,"Event","","Markdown events that are generated in a preorder traversal…",null,null],[13,"Start","","Start of a tagged element. Events that are yielded after…",2,null],[13,"End","","End of a tagged element.",2,null],[13,"Text","","A text node.",2,null],[13,"Code","","An inline code node.",2,null],[13,"Html","","An HTML node.",2,null],[13,"FootnoteReference","","A reference to a footnote with given label, which may or…",2,null],[13,"SoftBreak","","A soft line break.",2,null],[13,"HardBreak","","A hard line break.",2,null],[13,"Rule","","A horizontal ruler.",2,null],[13,"TaskListMarker","","A task list marker, rendered as a checkbox in HTML.…",2,null],[4,"LinkType","","Type specifier for inline links. See the Tag::Link for…",null,null],[13,"Inline","","Inline link like `[foo](bar)`",3,null],[13,"Reference","","Reference link like `[foo][bar]`",3,null],[13,"ReferenceUnknown","","Reference without destination in the document, but…",3,null],[13,"Collapsed","","Collapsed link like `[foo][]`",3,null],[13,"CollapsedUnknown","","Collapsed link without destination in the document, but…",3,null],[13,"Shortcut","","Shortcut link like `[foo]`",3,null],[13,"ShortcutUnknown","","Shortcut without destination in the document, but resolved…",3,null],[13,"Autolink","","Autolink like `<http://foo.bar/baz>`",3,null],[13,"Email","","Email address in autolink like `<john@example.org>`",3,null],[4,"Tag","","Tags for elements that can contain other elements.",null,null],[13,"Paragraph","","A paragraph of text and other inline elements.",4,null],[13,"Heading","","A heading. The field indicates the level of the heading.",4,null],[13,"BlockQuote","","",4,null],[13,"CodeBlock","","A code block.",4,null],[13,"List","","A list. If the list is ordered the field indicates the…",4,null],[13,"Item","","A list item.",4,null],[13,"FootnoteDefinition","","A footnote definition. The value contained is the…",4,null],[13,"Table","","A table. Contains a vector describing the text-alignment…",4,null],[13,"TableHead","","A table header. Contains only `TableRow`s. Note that the…",4,null],[13,"TableRow","","A table row. Is used both for header rows as body rows.…",4,null],[13,"TableCell","","",4,null],[13,"Emphasis","","",4,null],[13,"Strong","","",4,null],[13,"Strikethrough","","",4,null],[13,"Link","","A link. The first field is the link type, the second the…",4,null],[13,"Image","","An image. The first field is the link type, the second the…",4,null],[4,"CowStr","","A copy-on-write string that can be owned, borrowed or…",null,null],[13,"Boxed","","An owned, immutable string.",5,null],[13,"Borrowed","","A borrowed string.",5,null],[13,"Inlined","","A short inline string.",5,null],[0,"html","","HTML renderer that takes an iterator of events as input.",null,null],[5,"push_html","pulldown_cmark::html","Iterate over an `Iterator` of `Event`s, generate HTML for…",null,[[["string",3]]]],[5,"write_html","","Iterate over an `Iterator` of `Event`s, generate HTML for…",null,[[],["result",6]]],[11,"is_indented","pulldown_cmark","",1,[[]]],[11,"is_fenced","","",1,[[]]],[18,"ENABLE_TABLES","","",6,null],[18,"ENABLE_FOOTNOTES","","",6,null],[18,"ENABLE_STRIKETHROUGH","","",6,null],[18,"ENABLE_TASKLISTS","","",6,null],[11,"empty","","Returns an empty set of flags",6,[[],["options",3]]],[11,"all","","Returns the set containing all flags.",6,[[],["options",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",6,[[]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",6,[[],[["options",3],["option",4]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",6,[[],["options",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",6,[[],["options",3]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",6,[[]]],[11,"is_all","","Returns `true` if all flags are currently set.",6,[[]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",6,[[["options",3]]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",6,[[["options",3]]]],[11,"insert","","Inserts the specified flags in-place.",6,[[["options",3]]]],[11,"remove","","Removes the specified flags in-place.",6,[[["options",3]]]],[11,"toggle","","Toggles the specified flags in-place.",6,[[["options",3]]]],[11,"set","","Inserts or removes the specified flags depending on the…",6,[[["options",3]]]],[11,"new","","Creates a new event iterator for a markdown string without…",7,[[],["parser",3]]],[11,"new_ext","","Creates a new event iterator for a markdown string with…",7,[[["options",3]],["parser",3]]],[11,"new_with_broken_link_callback","","In case the parser encounters any potential links that…",7,[[["options",3],["fn",8],["option",4]],["parser",3]]],[11,"into_offset_iter","","Consumes the event iterator and produces an iterator that…",7,[[],["offsetiter",3]]],[11,"into_string","","",5,[[],["string",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"into_iter","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"into_iter","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"to_string","","",9,[[],["string",3]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"as_ref","","",9,[[]]],[11,"as_ref","","",5,[[]]],[11,"from","","",9,[[]]],[11,"from","","",5,[[]]],[11,"from","","",5,[[["string",3]]]],[11,"from","","",5,[[]]],[11,"extend","","",6,[[["intoiterator",8]]]],[11,"next","","",8,[[],["option",4]]],[11,"next","","",7,[[],[["option",4],["event",4]]]],[11,"clone","","",1,[[],["codeblockkind",4]]],[11,"clone","","",4,[[],["tag",4]]],[11,"clone","","",3,[[],["linktype",4]]],[11,"clone","","",2,[[],["event",4]]],[11,"clone","","",0,[[],["alignment",4]]],[11,"clone","","",6,[[],["options",3]]],[11,"clone","","",7,[[],["parser",3]]],[11,"clone","","",9,[[],["inlinestr",3]]],[11,"clone","","",5,[[]]],[11,"cmp","","",6,[[["options",3]],["ordering",4]]],[11,"eq","","",1,[[["codeblockkind",4]]]],[11,"ne","","",1,[[["codeblockkind",4]]]],[11,"eq","","",4,[[["tag",4]]]],[11,"ne","","",4,[[["tag",4]]]],[11,"eq","","",3,[[["linktype",4]]]],[11,"eq","","",2,[[["event",4]]]],[11,"ne","","",2,[[["event",4]]]],[11,"eq","","",0,[[["alignment",4]]]],[11,"eq","","",6,[[["options",3]]]],[11,"ne","","",6,[[["options",3]]]],[11,"eq","","",9,[[["inlinestr",3]]]],[11,"eq","","",5,[[["cowstr",4]]]],[11,"partial_cmp","","",6,[[["options",3]],[["ordering",4],["option",4]]]],[11,"lt","","",6,[[["options",3]]]],[11,"le","","",6,[[["options",3]]]],[11,"gt","","",6,[[["options",3]]]],[11,"ge","","",6,[[["options",3]]]],[11,"deref","","",9,[[]]],[11,"deref","","",5,[[]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"sub","","Returns the set difference of the two sets of flags.",6,[[["options",3]],["options",3]]],[11,"sub_assign","","Disables all flags enabled in the set.",6,[[["options",3]]]],[11,"not","","Returns the complement of this set of flags.",6,[[],["options",3]]],[11,"bitand","","Returns the intersection between the two sets of flags.",6,[[["options",3]],["options",3]]],[11,"bitor","","Returns the union of the two sets of flags.",6,[[["options",3]],["options",3]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",6,[[["options",3]],["options",3]]],[11,"bitand_assign","","Disables all flags disabled in the set.",6,[[["options",3]]]],[11,"bitor_assign","","Adds the set of flags.",6,[[["options",3]]]],[11,"bitxor_assign","","Toggles the set of flags.",6,[[["options",3]]]],[11,"hash","","",6,[[]]],[11,"hash","","",9,[[]]],[11,"hash","","",5,[[]]],[11,"from_iter","","",6,[[["intoiterator",8]],["options",3]]],[11,"try_from","","",9,[[],[["result",4],["inlinestr",3],["stringtoolongerror",3]]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"borrow","","",5,[[]]]],"p":[[4,"Alignment"],[4,"CodeBlockKind"],[4,"Event"],[4,"LinkType"],[4,"Tag"],[4,"CowStr"],[3,"Options"],[3,"Parser"],[3,"OffsetIter"],[3,"InlineStr"]]};
searchIndex["unicase"] = {"doc":"UniCase","i":[[3,"UniCase","unicase","Case Insensitive wrapper of strings.",null,null],[3,"Ascii","","Case Insensitive wrapper of Ascii strings.",null,null],[5,"eq","","Compare two string-like types for case-less equality,…",null,[[]]],[5,"eq_ascii","","Compare two string-like types for case-less equality,…",null,[[]]],[11,"new","","",0,[[],["ascii",3]]],[11,"into_unicase","","",0,[[],["unicase",3]]],[11,"into_inner","","",0,[[]]],[11,"new","","Creates a new `UniCase`.",1,[[],["unicase",3]]],[11,"unicode","","Creates a new `UniCase`, skipping the ASCII check.",1,[[],["unicase",3]]],[11,"ascii","","Creates a new `UniCase` which performs only ASCII case…",1,[[],["unicase",3]]],[11,"is_ascii","","Return `true` if this instance will only perform ASCII…",1,[[]]],[11,"into_inner","","Unwraps the inner value held by this `UniCase`.",1,[[]]],[11,"from","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"from","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"deref","","",0,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",0,[[]]],[11,"deref_mut","","",1,[[]]],[11,"from","","",1,[[["ascii",3]]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[["string",3]]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[["cow",4]]]],[11,"from","","",1,[[["string",3]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"eq","","",0,[[]]],[11,"eq","","",1,[[["unicase",3]]]],[11,"cmp","","",0,[[],["ordering",4]]],[11,"cmp","","",1,[[],["ordering",4]]],[11,"partial_cmp","","",0,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",1,[[],[["option",4],["ordering",4]]]],[11,"hash","","",0,[[]]],[11,"hash","","",1,[[]]],[11,"from_str","","",0,[[],[["result",4],["ascii",3]]]],[11,"from_str","","",1,[[],[["result",4],["unicase",3]]]],[11,"as_ref","","",0,[[]]],[11,"as_ref","","",1,[[]]],[11,"into","","",1,[[]]],[11,"into","","",1,[[],["string",3]]],[11,"into","","",1,[[],["cow",4]]],[11,"clone","","",1,[[],["unicase",3]]],[11,"clone","","",0,[[],["ascii",3]]],[11,"default","","",0,[[],["ascii",3]]],[11,"default","","",1,[[]]]],"p":[[3,"Ascii"],[3,"UniCase"]]};
searchIndex["unicode_width"] = {"doc":"Determine displayed width of `char` and `str` types…","i":[[17,"UNICODE_VERSION","unicode_width","The version of Unicode that this version of unicode-width…",null,null],[8,"UnicodeWidthChar","","Methods for determining displayed width of Unicode…",null,null],[10,"width","","Returns the character's displayed width in columns, or…",0,[[],["option",4]]],[10,"width_cjk","","Returns the character's displayed width in columns, or…",0,[[],["option",4]]],[8,"UnicodeWidthStr","","Methods for determining displayed width of Unicode strings.",null,null],[10,"width","","Returns the string's displayed width in columns.",1,[[]]],[10,"width_cjk","","Returns the string's displayed width in columns.",1,[[]]]],"p":[[8,"UnicodeWidthChar"],[8,"UnicodeWidthStr"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);