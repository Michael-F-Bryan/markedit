var searchIndex={};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator useful for sets of…","i":[[14,"bitflags","bitflags","The macro used to generate the flag structure.",null,null]],"p":[]};
searchIndex["getopts"] = {"doc":"Simple getopt alternative.","i":[[3,"Options","getopts","A description of the options that a program can handle.",null,null],[3,"Matches","","The result of checking command line arguments. Contains a…",null,null],[12,"free","","Free string fragments",0,null],[4,"ParsingStyle","","What parsing style to use when parsing arguments.",null,null],[13,"FloatingFrees","","Flags and \"free\" arguments can be freely inter-mixed.",1,null],[13,"StopAtFirstFree","","As soon as a \"free\" argument (i.e. non-flag) is…",1,null],[4,"HasArg","","Describes whether an option has an argument.",null,null],[13,"Yes","","The option requires an argument.",2,null],[13,"No","","The option takes no argument.",2,null],[13,"Maybe","","The option argument is optional.",2,null],[4,"Occur","","Describes how often an option may occur.",null,null],[13,"Req","","The option occurs once.",3,null],[13,"Optional","","The option occurs at most once.",3,null],[13,"Multi","","The option occurs zero or more times.",3,null],[4,"Fail","","The type returned when the command line does not conform…",null,null],[13,"ArgumentMissing","","The option requires an argument but none was passed.",4,null],[13,"UnrecognizedOption","","The passed option is not declared among the possible…",4,null],[13,"OptionMissing","","A required option is not present.",4,null],[13,"OptionDuplicated","","A single occurrence option is being used multiple times.",4,null],[13,"UnexpectedArgument","","There's an argument being passed to a non-argument option.",4,null],[6,"Result","","The result of parsing a command line with a set of options.",null,null],[11,"new","","Create a blank set of options.",5,[[],["options"]]],[11,"parsing_style","","Set the parsing style.",5,[[["self"],["parsingstyle"]],["options"]]],[11,"long_only","","Set or clear \"long options only\" mode.",5,[[["self"],["bool"]],["options"]]],[11,"opt","","Create a generic option group, stating all parameters…",5,[[["str"],["hasarg"],["self"],["occur"]],["options"]]],[11,"optflag","","Create a long option that is optional and does not take an…",5,[[["str"],["self"]],["options"]]],[11,"optflagmulti","","Create a long option that can occur more than once and…",5,[[["str"],["self"]],["options"]]],[11,"optflagopt","","Create a long option that is optional and takes an…",5,[[["str"],["self"]],["options"]]],[11,"optmulti","","Create a long option that is optional, takes an argument,…",5,[[["str"],["self"]],["options"]]],[11,"optopt","","Create a long option that is optional and takes an argument.",5,[[["str"],["self"]],["options"]]],[11,"reqopt","","Create a long option that is required and takes an argument.",5,[[["str"],["self"]],["options"]]],[11,"parse","","Parse command line arguments according to the provided…",5,[[["intoiterator"],["self"]],["result"]]],[11,"short_usage","","Derive a short one-line usage summary from a set of long…",5,[[["str"],["self"]],["string"]]],[11,"usage","","Derive a formatted message from a set of options.",5,[[["str"],["self"]],["string"]]],[11,"usage_with_format","","Derive a custom formatted message from a set of options.…",5,[[["self"],["fnmut"]],["string"]]],[11,"opt_defined","","Returns true if an option was defined",0,[[["str"],["self"]],["bool"]]],[11,"opt_present","","Returns true if an option was matched.",0,[[["str"],["self"]],["bool"]]],[11,"opt_count","","Returns the number of times an option was matched.",0,[[["str"],["self"]],["usize"]]],[11,"opt_positions","","Returns a vector of all the positions in which an option…",0,[[["str"],["self"]],[["vec",["usize"]],["usize"]]]],[11,"opts_present","","Returns true if any of several options were matched.",0,[[["self"]],["bool"]]],[11,"opts_str","","Returns the string argument supplied to one of several…",0,[[["self"]],[["option",["string"]],["string"]]]],[11,"opt_strs","","Returns a vector of the arguments provided to all matches…",0,[[["str"],["self"]],[["string"],["vec",["string"]]]]],[11,"opt_strs_pos","","Returns a vector of the arguments provided to all matches…",0,[[["str"],["self"]],["vec"]]],[11,"opt_str","","Returns the string argument supplied to a matching option…",0,[[["str"],["self"]],[["option",["string"]],["string"]]]],[11,"opt_default","","Returns the matching string, a default, or `None`.",0,[[["str"],["self"]],[["option",["string"]],["string"]]]],[11,"opt_get","","Returns some matching value or `None`.",0,[[["str"],["self"]],[["result",["option"]],["option"]]]],[11,"opt_get_default","","Returns a matching value or default.",0,[[["str"],["self"],["t"]],["result"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"clone","","",1,[[["self"]],["parsingstyle"]]],[11,"clone","","",2,[[["self"]],["hasarg"]]],[11,"clone","","",3,[[["self"]],["occur"]]],[11,"clone","","",0,[[["self"]],["matches"]]],[11,"clone","","",4,[[["self"]],["fail"]]],[11,"default","","",5,[[],["self"]]],[11,"eq","","",1,[[["self"],["parsingstyle"]],["bool"]]],[11,"eq","","",2,[[["self"],["hasarg"]],["bool"]]],[11,"eq","","",3,[[["occur"],["self"]],["bool"]]],[11,"eq","","",0,[[["self"],["matches"]],["bool"]]],[11,"ne","","",0,[[["self"],["matches"]],["bool"]]],[11,"eq","","",4,[[["fail"],["self"]],["bool"]]],[11,"ne","","",4,[[["fail"],["self"]],["bool"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"description","","",4,[[["self"]],["str"]]]],"p":[[3,"Matches"],[4,"ParsingStyle"],[4,"HasArg"],[4,"Occur"],[4,"Fail"],[3,"Options"]]};
searchIndex["markedit"] = {"doc":"An ergonomic library for manipulating markdown documents.","i":[[3,"And","markedit","A [`Matcher`] which only returns `true` when both inner…",null,null],[3,"FallingEdge","","A [`Matcher`] which will detect the falling edge of another.",null,null],[3,"Heading","","Matches the items inside a heading tag, including the…",null,null],[3,"OneShot","","A [`Matcher`] which will only ever return `true` once.",null,null],[3,"StartOfNextLine","","A [`Matcher`] which will match the start of the next…",null,null],[3,"Always","","A [`Matcher`] which matches everything.",null,null],[3,"Rewritten","","A stream of [`Event`]s that have been modified by a…",null,null],[3,"Writer","","The output buffer given to [`Rewriter::rewrite_event()`].",null,null],[5,"match_indices","","Get an iterator over the indices of matching events.",null,[[["m"]]]],[5,"between","","Gets all [`Event`]s between (inclusive) two matchers.",null,[[["s"],["e"]],["option"]]],[5,"exact_text","","Match an [`Event::Text`] event with this exact text.",null,[[["str"],["asref",["str"]]]]],[5,"text_containing","","Match an [`Event::Text`] event which contains the provided…",null,[[["str"],["asref",["str"]]]]],[5,"text","","Match a [`Event::Text`] node using an arbitrary predicate.",null,[[["p"]]]],[5,"link_with_url_containing","","Matches the start of a link who's URL contains a certain…",null,[[["str"],["asref",["str"]]]]],[5,"rewrite","","The whole point.",null,[[["r"],["e"]]]],[5,"insert_markdown_before","","Inserts some markdown text before whatever is matched by…",null,[[["s"],["m"]]]],[5,"insert_before","","Splice some events into the resulting event stream before…",null,[[["event"],["m"],["vec",["event"]]]]],[5,"change_text","","A [`Rewriter`] which lets you update a [`Event::Text`]…",null,[[["m"],["f"]]]],[5,"owned_event","","",null,[[["event"]],["event"]]],[5,"parse","","A convenience function for parsing some text into…",null,[[["str"]]]],[11,"new","","",0,[[["r"],["l"]],["self"]]],[11,"new","","",1,[[["m"]],["self"]]],[11,"any_level","","Matches any heading.",2,[[],["self"]]],[11,"with_level","","Matches only headings with the desired level.",2,[[["u32"]],["self"]]],[11,"new","","",3,[[["m"]],["self"]]],[11,"new","","",4,[[["m"]],["self"]]],[11,"new","","",5,[[["r"],["e"]],["self"]]],[11,"push","","Queue an [`Event`] to be emitted.",6,[[["event"],["self"]]]],[8,"Matcher","","A predicate which can be fed a stream of [`Event`]s and…",null,null],[10,"matches_event","","",7,[[["self"],["event"]],["bool"]]],[11,"first_match","","Find the index of the first [`Event`] which is matched by…",7,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"is_in","","Checks whether this [`Matcher`] would match anything in a…",7,[[["i"]],["bool"]]],[11,"then_start_of_next_line","","Returns a [`Matcher`] which will wait until `self`…",7,[[],["startofnextline"]]],[11,"fuse","","Wraps `self` in a [`Matcher`] which will only ever return…",7,[[],["oneshot"]]],[11,"falling_edge","","Get a [`Matcher`] which returns `true` when `self` goes…",7,[[],["fallingedge"]]],[11,"and","","",7,[[["m"]],["and"]]],[8,"Rewriter","","Something which can rewrite events.",null,null],[10,"rewrite_event","","Process a single [`Event`].",8,[[["event"],["self"],["writer"]]]],[11,"rewrite","","",8,[[["e"]],["rewritten"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"into_iter","","",5,[[],["i"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"matches_event","","",0,[[["self"],["event"]],["bool"]]],[11,"matches_event","","",1,[[["self"],["event"]],["bool"]]],[11,"matches_event","","",2,[[["self"],["event"]],["bool"]]],[11,"matches_event","","",3,[[["self"],["event"]],["bool"]]],[11,"matches_event","","",4,[[["self"],["event"]],["bool"]]],[11,"matches_event","","",9,[[["self"],["event"]],["bool"]]],[11,"extend","","",6,[[["self"],["intoiterator"]]]],[11,"next","","",5,[[["self"]],["option"]]],[11,"clone","","",0,[[["self"]],["and"]]],[11,"clone","","",1,[[["self"]],["fallingedge"]]],[11,"clone","","",2,[[["self"]],["heading"]]],[11,"clone","","",3,[[["self"]],["oneshot"]]],[11,"clone","","",4,[[["self"]],["startofnextline"]]],[11,"clone","","",9,[[["self"]],["always"]]],[11,"default","","",9,[[],["always"]]],[11,"eq","","",0,[[["and"],["self"]],["bool"]]],[11,"ne","","",0,[[["and"],["self"]],["bool"]]],[11,"eq","","",1,[[["self"],["fallingedge"]],["bool"]]],[11,"ne","","",1,[[["self"],["fallingedge"]],["bool"]]],[11,"eq","","",2,[[["self"],["heading"]],["bool"]]],[11,"ne","","",2,[[["self"],["heading"]],["bool"]]],[11,"eq","","",3,[[["oneshot"],["self"]],["bool"]]],[11,"ne","","",3,[[["oneshot"],["self"]],["bool"]]],[11,"eq","","",4,[[["startofnextline"],["self"]],["bool"]]],[11,"ne","","",4,[[["startofnextline"],["self"]],["bool"]]],[11,"eq","","",9,[[["always"],["self"]],["bool"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"hash","","",9,[[["self"],["__h"]]]],[11,"first_match","","Find the index of the first [`Event`] which is matched by…",7,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"is_in","","Checks whether this [`Matcher`] would match anything in a…",7,[[["i"]],["bool"]]],[11,"then_start_of_next_line","","Returns a [`Matcher`] which will wait until `self`…",7,[[],["startofnextline"]]],[11,"fuse","","Wraps `self` in a [`Matcher`] which will only ever return…",7,[[],["oneshot"]]],[11,"falling_edge","","Get a [`Matcher`] which returns `true` when `self` goes…",7,[[],["fallingedge"]]],[11,"and","","",7,[[["m"]],["and"]]],[11,"rewrite","","",8,[[["e"]],["rewritten"]]]],"p":[[3,"And"],[3,"FallingEdge"],[3,"Heading"],[3,"OneShot"],[3,"StartOfNextLine"],[3,"Rewritten"],[3,"Writer"],[8,"Matcher"],[8,"Rewriter"],[3,"Always"]]};
searchIndex["memchr"] = {"doc":"The `memchr` crate provides heavily optimized routines for…","i":[[3,"Memchr","memchr","An iterator for `memchr`.",null,null],[3,"Memchr2","","An iterator for `memchr2`.",null,null],[3,"Memchr3","","An iterator for `memchr3`.",null,null],[5,"memchr_iter","","An iterator over all occurrences of the needle in a…",null,[[["u8"]],["memchr"]]],[5,"memchr2_iter","","An iterator over all occurrences of the needles in a…",null,[[["u8"]],["memchr2"]]],[5,"memchr3_iter","","An iterator over all occurrences of the needles in a…",null,[[["u8"]],["memchr3"]]],[5,"memrchr_iter","","An iterator over all occurrences of the needle in a…",null,[[["u8"]],[["rev",["memchr"]],["memchr"]]]],[5,"memrchr2_iter","","An iterator over all occurrences of the needles in a…",null,[[["u8"]],[["rev",["memchr2"]],["memchr2"]]]],[5,"memrchr3_iter","","An iterator over all occurrences of the needles in a…",null,[[["u8"]],[["rev",["memchr3"]],["memchr3"]]]],[5,"memchr","","Search for the first occurrence of a byte in a slice.",null,[[["u8"]],[["option",["usize"]],["usize"]]]],[5,"memchr2","","Like `memchr`, but searches for either of two bytes…",null,[[["u8"]],[["option",["usize"]],["usize"]]]],[5,"memchr3","","Like `memchr`, but searches for any of three bytes instead…",null,[[["u8"]],[["option",["usize"]],["usize"]]]],[5,"memrchr","","Search for the last occurrence of a byte in a slice.",null,[[["u8"]],[["option",["usize"]],["usize"]]]],[5,"memrchr2","","Like `memrchr`, but searches for either of two bytes…",null,[[["u8"]],[["option",["usize"]],["usize"]]]],[5,"memrchr3","","Like `memrchr`, but searches for any of three bytes…",null,[[["u8"]],[["option",["usize"]],["usize"]]]],[11,"new","","Creates a new iterator that yields all positions of needle…",0,[[["u8"]],["memchr"]]],[11,"new","","Creates a new iterator that yields all positions of needle…",1,[[["u8"]],["memchr2"]]],[11,"new","","Create a new `Memchr3` that's initialized to zero with a…",2,[[["u8"]],["memchr3"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"into_iter","","",0,[[],["i"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"into_iter","","",1,[[],["i"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"into_iter","","",2,[[],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"next_back","","",0,[[["self"]],["option"]]],[11,"next_back","","",1,[[["self"]],["option"]]],[11,"next_back","","",2,[[["self"]],["option"]]],[11,"next","","",0,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"size_hint","","",0,[[["self"]]]],[11,"next","","",1,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"size_hint","","",1,[[["self"]]]],[11,"next","","",2,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"size_hint","","",2,[[["self"]]]]],"p":[[3,"Memchr"],[3,"Memchr2"],[3,"Memchr3"]]};
searchIndex["pulldown_cmark"] = {"doc":"Pull parser for CommonMark. This crate provides a Parser…","i":[[3,"OffsetIter","pulldown_cmark","Markdown event and source range iterator.",null,null],[3,"Options","","Option struct containing flags for enabling extra features…",null,null],[3,"Parser","","Markdown event iterator.",null,null],[3,"InlineStr","","An inline string that can contain almost three words of…",null,null],[4,"Alignment","","Table column text alignment.",null,null],[13,"None","","Default text alignment.",0,null],[13,"Left","","",0,null],[13,"Center","","",0,null],[13,"Right","","",0,null],[4,"Event","","Markdown events that are generated in a preorder traversal…",null,null],[13,"Start","","Start of a tagged element. Events that are yielded after…",1,null],[13,"End","","End of a tagged element.",1,null],[13,"Text","","A text node.",1,null],[13,"Code","","An inline code node.",1,null],[13,"Html","","An HTML node.",1,null],[13,"FootnoteReference","","A reference to a footnote with given label, which may or…",1,null],[13,"SoftBreak","","A soft line break.",1,null],[13,"HardBreak","","A hard line break.",1,null],[13,"Rule","","A horizontal ruler.",1,null],[13,"TaskListMarker","","A task list marker, rendered as a checkbox in HTML.…",1,null],[4,"LinkType","","Type specifier for inline links. See the Tag::Link for…",null,null],[13,"Inline","","Inline link like `[foo](bar)`",2,null],[13,"Reference","","Reference link like `[foo][bar]`",2,null],[13,"ReferenceUnknown","","Reference without destination in the document, but…",2,null],[13,"Collapsed","","Collapsed link like `[foo][]`",2,null],[13,"CollapsedUnknown","","Collapsed link without destination in the document, but…",2,null],[13,"Shortcut","","Shortcut link like `[foo]`",2,null],[13,"ShortcutUnknown","","Shortcut without destination in the document, but resolved…",2,null],[13,"Autolink","","Autolink like `<http://foo.bar/baz>`",2,null],[13,"Email","","Email address in autolink like `<john@example.org>`",2,null],[4,"Tag","","Tags for elements that can contain other elements.",null,null],[13,"Paragraph","","A paragraph of text and other inline elements.",3,null],[13,"Heading","","A heading. The field indicates the level of the heading.",3,null],[13,"BlockQuote","","",3,null],[13,"CodeBlock","","A code block. The value contained in the tag describes the…",3,null],[13,"List","","A list. If the list is ordered the field indicates the…",3,null],[13,"Item","","A list item.",3,null],[13,"FootnoteDefinition","","A footnote definition. The value contained is the…",3,null],[13,"Table","","A table. Contains a vector describing the text-alignment…",3,null],[13,"TableHead","","A table header. Contains only `TableRow`s. Note that the…",3,null],[13,"TableRow","","A table row. Is used both for header rows as body rows.…",3,null],[13,"TableCell","","",3,null],[13,"Emphasis","","",3,null],[13,"Strong","","",3,null],[13,"Strikethrough","","",3,null],[13,"Link","","A link. The first field is the link type, the second the…",3,null],[13,"Image","","An image. The first field is the link type, the second the…",3,null],[4,"CowStr","","A copy-on-write string that can be owned, borrowed or…",null,null],[13,"Boxed","","An owned, immutable string.",4,null],[13,"Borrowed","","A borrowed string.",4,null],[13,"Inlined","","A short inline string.",4,null],[0,"html","","HTML renderer that takes an iterator of events as input.",null,null],[5,"push_html","pulldown_cmark::html","Iterate over an `Iterator` of `Event`s, generate HTML for…",null,[[["i"],["string"]]]],[5,"write_html","","Iterate over an `Iterator` of `Event`s, generate HTML for…",null,[[["w"],["i"]],["result"]]],[18,"ENABLE_TABLES","pulldown_cmark","",5,null],[18,"ENABLE_FOOTNOTES","","",5,null],[18,"ENABLE_STRIKETHROUGH","","",5,null],[18,"ENABLE_TASKLISTS","","",5,null],[11,"empty","","Returns an empty set of flags",5,[[],["options"]]],[11,"all","","Returns the set containing all flags.",5,[[],["options"]]],[11,"bits","","Returns the raw value of the flags currently stored.",5,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",5,[[["u32"]],[["options"],["option",["options"]]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",5,[[["u32"]],["options"]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",5,[[["u32"]],["options"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",5,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",5,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",5,[[["options"],["self"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",5,[[["options"],["self"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",5,[[["self"],["options"]]]],[11,"remove","","Removes the specified flags in-place.",5,[[["self"],["options"]]]],[11,"toggle","","Toggles the specified flags in-place.",5,[[["self"],["options"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",5,[[["self"],["options"],["bool"]]]],[11,"new","","Creates a new event iterator for a markdown string without…",6,[[["str"]],["parser"]]],[11,"new_ext","","Creates a new event iteratorfor a markdown string with…",6,[[["str"],["options"]],["parser"]]],[11,"new_with_broken_link_callback","","In case the parser encounters any potential links that…",6,[[["option",["fn"]],["options"],["str"],["fn"]],["parser"]]],[11,"into_offset_iter","","Consumes the event iterator and produces an iterator that…",6,[[],["offsetiter"]]],[11,"into_string","","",4,[[],["string"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"into_iter","","",7,[[],["i"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"into_iter","","",6,[[],["i"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"as_ref","","",8,[[["self"]],["str"]]],[11,"as_ref","","",4,[[["self"]],["str"]]],[11,"from","","",8,[[["char"]],["self"]]],[11,"from","","",4,[[["str"]],["self"]]],[11,"from","","",4,[[["string"]],["self"]]],[11,"from","","",4,[[["char"]],["self"]]],[11,"extend","","",5,[[["self"],["intoiterator"]]]],[11,"next","","",7,[[["self"]],["option"]]],[11,"next","","",6,[[["self"]],[["option",["event"]],["event"]]]],[11,"clone","","",3,[[["self"]],["tag"]]],[11,"clone","","",2,[[["self"]],["linktype"]]],[11,"clone","","",1,[[["self"]],["event"]]],[11,"clone","","",0,[[["self"]],["alignment"]]],[11,"clone","","",5,[[["self"]],["options"]]],[11,"clone","","",6,[[["self"]],["parser"]]],[11,"clone","","",8,[[["self"]],["inlinestr"]]],[11,"clone","","",4,[[["self"]],["self"]]],[11,"cmp","","",5,[[["options"],["self"]],["ordering"]]],[11,"eq","","",3,[[["tag"],["self"]],["bool"]]],[11,"ne","","",3,[[["tag"],["self"]],["bool"]]],[11,"eq","","",2,[[["self"],["linktype"]],["bool"]]],[11,"eq","","",1,[[["self"],["event"]],["bool"]]],[11,"ne","","",1,[[["self"],["event"]],["bool"]]],[11,"eq","","",0,[[["self"],["alignment"]],["bool"]]],[11,"eq","","",5,[[["options"],["self"]],["bool"]]],[11,"ne","","",5,[[["options"],["self"]],["bool"]]],[11,"eq","","",8,[[["inlinestr"],["self"]],["bool"]]],[11,"eq","","",4,[[["cowstr"],["self"]],["bool"]]],[11,"partial_cmp","","",5,[[["options"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",5,[[["options"],["self"]],["bool"]]],[11,"le","","",5,[[["options"],["self"]],["bool"]]],[11,"gt","","",5,[[["options"],["self"]],["bool"]]],[11,"ge","","",5,[[["options"],["self"]],["bool"]]],[11,"deref","","",8,[[["self"]],["str"]]],[11,"deref","","",4,[[["self"]],["str"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"sub","","Returns the set difference of the two sets of flags.",5,[[["options"]],["options"]]],[11,"sub_assign","","Disables all flags enabled in the set.",5,[[["self"],["options"]]]],[11,"not","","Returns the complement of this set of flags.",5,[[],["options"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",5,[[["options"]],["options"]]],[11,"bitor","","Returns the union of the two sets of flags.",5,[[["options"]],["options"]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",5,[[["options"]],["options"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",5,[[["self"],["options"]]]],[11,"bitor_assign","","Adds the set of flags.",5,[[["self"],["options"]]]],[11,"bitxor_assign","","Toggles the set of flags.",5,[[["self"],["options"]]]],[11,"hash","","",5,[[["self"],["__h"]]]],[11,"hash","","",8,[[["self"],["h"]]]],[11,"hash","","",4,[[["self"],["h"]]]],[11,"from_iter","","",5,[[["intoiterator"]],["options"]]],[11,"try_from","","",8,[[["str"]],[["stringtoolongerror"],["result",["inlinestr","stringtoolongerror"]],["inlinestr"]]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"borrow","","",4,[[["self"]],["str"]]]],"p":[[4,"Alignment"],[4,"Event"],[4,"LinkType"],[4,"Tag"],[4,"CowStr"],[3,"Options"],[3,"Parser"],[3,"OffsetIter"],[3,"InlineStr"]]};
searchIndex["unicase"] = {"doc":"UniCase","i":[[3,"UniCase","unicase","Case Insensitive wrapper of strings.",null,null],[3,"Ascii","","Case Insensitive wrapper of Ascii strings.",null,null],[5,"eq","","Compare two string-like types for case-less equality,…",null,[[["s"]],["bool"]]],[5,"eq_ascii","","Compare two string-like types for case-less equality,…",null,[[["s"]],["bool"]]],[11,"new","","",0,[[["s"]],["ascii"]]],[11,"into_unicase","","",0,[[],["unicase"]]],[11,"into_inner","","",0,[[],["s"]]],[11,"new","","Creates a new `UniCase`.",1,[[["s"]],["unicase"]]],[11,"unicode","","Creates a new `UniCase`, skipping the ASCII check.",1,[[["s"]],["unicase"]]],[11,"ascii","","Creates a new `UniCase` which performs only ASCII case…",1,[[["s"]],["unicase"]]],[11,"is_ascii","","Return `true` if this instance will only perform ASCII…",1,[[["self"]],["bool"]]],[11,"into_inner","","Unwraps the inner value held by this `UniCase`.",1,[[],["s"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"deref","","",0,[[["self"]],["s"]]],[11,"deref","","",1,[[["self"]],["s"]]],[11,"deref_mut","","",0,[[["self"]],["s"]]],[11,"deref_mut","","",1,[[["self"]],["s"]]],[11,"from","","",1,[[["ascii"]],["self"]]],[11,"from","","",1,[[["s"]],["self"]]],[11,"from","","",1,[[["str"]],["self"]]],[11,"from","","",1,[[["string"]],["self"]]],[11,"from","","",1,[[["str"]],["self"]]],[11,"from","","",1,[[["cow",["str"]],["str"]],["self"]]],[11,"from","","",1,[[["string"]],["self"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["s2"],["self"]],["bool"]]],[11,"eq","","",1,[[["self"],["unicase"]],["bool"]]],[11,"cmp","","",0,[[["self"]],["ordering"]]],[11,"cmp","","",1,[[["self"]],["ordering"]]],[11,"partial_cmp","","",0,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",1,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"hash","","",1,[[["self"],["h"]]]],[11,"from_str","","",0,[[["str"]],[["result",["ascii"]],["ascii"]]]],[11,"from_str","","",1,[[["str"]],[["result",["unicase"]],["unicase"]]]],[11,"as_ref","","",0,[[["self"]],["str"]]],[11,"as_ref","","",1,[[["self"]],["str"]]],[11,"into","","",1,[[],["str"]]],[11,"into","","",1,[[],["string"]]],[11,"into","","",1,[[],[["cow",["str"]],["str"]]]],[11,"clone","","",1,[[["self"]],["unicase"]]],[11,"clone","","",0,[[["self"]],["ascii"]]],[11,"default","","",0,[[],["ascii"]]],[11,"default","","",1,[[],["self"]]]],"p":[[3,"Ascii"],[3,"UniCase"]]};
searchIndex["unicode_width"] = {"doc":"Determine displayed width of `char` and `str` types…","i":[[17,"UNICODE_VERSION","unicode_width","The version of Unicode that this version of unicode-width…",null,null],[8,"UnicodeWidthChar","","Methods for determining displayed width of Unicode…",null,null],[10,"width","","Returns the character's displayed width in columns, or…",0,[[],[["option",["usize"]],["usize"]]]],[10,"width_cjk","","Returns the character's displayed width in columns, or…",0,[[],[["option",["usize"]],["usize"]]]],[8,"UnicodeWidthStr","","Methods for determining displayed width of Unicode strings.",null,null],[10,"width","","Returns the string's displayed width in columns.",1,[[["self"]],["usize"]]],[10,"width_cjk","","Returns the string's displayed width in columns.",1,[[["self"]],["usize"]]]],"p":[[8,"UnicodeWidthChar"],[8,"UnicodeWidthStr"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);